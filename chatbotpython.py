# -*- coding: utf-8 -*-
"""chatbotpython.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MFTyx3qNpq2OewxRCZ4gLigU9vi5DLbj
"""

import numpy as np
import nltk
import string
import random

f = open('/content/chatbot.txt','r', errors='ignore')
row_doc = f.read()
row_doc= row_doc.lower()
nltk.download('punkt')
nltk.download('wordnet')
sentence_tokens = nltk.sent_tokenize(row_doc)
word_tokens = nltk.word_tokenize(row_doc)

sentence_tokens [ : 2 ]

word_tokens[:2]

lemmer = nltk.stem.WordNetLemmatizer()
def LemTokens(tokens):
  return [lemmer.lemmatize(token) for token in tokens]

remove_punc_dict= dict ((ord(punct), None) for punct in string.punctuation)
def Lemnormalize(text):
  return LemTokens(nltk.word_tokenize(text.lower().translate(remove_punc_dict)))

"""greeting"""

GREET_INPUT=['Hello','hy','hi','whatsup']
GREET_RESPONSES=('hi','hy','hello i am glad you are talking to me')
def greet(sentence):
  for word in sentence.split():
    if word.lower() in GREET_INPUT:
      return random.choice(GREET_RESPONSES)

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

"""def response(user_response):
  robo1_response=''
  TfidfVect=TfidfVectorizer(tokenizer=Lemnormalised, stop_word =" english")
  Tfidf=TfidfVect.fit_transform(sent_token)
  vals=cosine_similarity(Tfidf[-1],Tfidf)
  idx=vals.flatten()
  flat.sort()
  req_Tfidf=flat[-2]
  if(req_Tfidf==0):
    robo1_response=robo1_response+"i m sorry"
    return robo1_response
  else:
    robo1_response=robo1_response+ sent_token[idx]
    return robo1_response  

"""

def response(user_response):
  robo1_response=' '
  TfidfVect = TfidfVectorizer(tokenizer= Lemnormalize , stop_words ='english')
  Tfidf = TfidfVect.fit_transform(sentence_tokens)
  vals=cosine_similarity(Tfidf[-1],Tfidf)
  idx=vals.argsort()[0][-2]
  flat=vals.flatten()
  flat.sort()
  req_Tfidf = flat[-2]
  if(req_Tfidf==0):
    robo1_response=robo1_response+"i m sorry"
    return robo1_response
  else:
    robo1_response=robo1_response+ sentence_tokens[idx]
    return robo1_response

flag=True

print("BOT: My name is Stark. Let's have a conversation! Also, if you want to exit any time, just type Bye!")

while(flag==True):
  user_response = input()

  user_response=user_response.lower()

  if(user_response!='bye'):
    if (user_response== 'thanks' or user_response== 'thank you' ):
      flag=False
      print("BOT: You are welcome..")

    else:
      if(greet(user_response)!= None):
        print("BOT: "+ greet\
              (user_response))

      else:
        sentence_tokens.append(user_response)
        word_tokens=word_tokens+nltk.word_tokenize(user_response)
        final_words= list (set (word_tokens))
        print("BOT: ",end="")
        print(response(user_response))
        sentence_tokens.remove(user_response)


  else:
    flag= False
    print("bye")